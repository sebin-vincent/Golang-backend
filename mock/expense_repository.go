// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wallet-tracky/Golang-backend/repository (interfaces: ExpenseRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/wallet-tracky/Golang-backend/model"
	reflect "reflect"
)

// MockExpenseRepository is a mock of ExpenseRepository interface
type MockExpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryMockRecorder
}

// MockExpenseRepositoryMockRecorder is the mock recorder for MockExpenseRepository
type MockExpenseRepositoryMockRecorder struct {
	mock *MockExpenseRepository
}

// NewMockExpenseRepository creates a new mock instance
func NewMockExpenseRepository(ctrl *gomock.Controller) *MockExpenseRepository {
	mock := &MockExpenseRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpenseRepository) EXPECT() *MockExpenseRepositoryMockRecorder {
	return m.recorder
}

// FindByUserId mocks base method
func (m *MockExpenseRepository) FindByUserId(arg0 int) *[]model.Expense {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0)
	ret0, _ := ret[0].(*[]model.Expense)
	return ret0
}

// FindByUserId indicates an expected call of FindByUserId
func (mr *MockExpenseRepositoryMockRecorder) FindByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockExpenseRepository)(nil).FindByUserId), arg0)
}

// Save mocks base method
func (m *MockExpenseRepository) Save(arg0 *model.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockExpenseRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockExpenseRepository)(nil).Save), arg0)
}
